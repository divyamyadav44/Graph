#include<bits/stdc++.h>
using namespace std;
vector<int> BFS(vector<int> adj[],int vertex)
{
    vector<int> res;
    vector<int> visited(vertex,0);
    visited[0]=1;
    queue<int> que;
    que.push(0);
    while(que.empty()==false)
    {
        int curr=que.front();
        que.pop();
        res.push_back(curr);
        for(auto it=adj[curr].begin();it!=adj[curr].end();it++)
        {
            if(visited[*it]==0)
            {
                visited[*it]=1;
                que.push(*it);
            }
        }
        
    }
    return res;
}
void addedge(vector<int> adj[],int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void printGraph(vector<int> adj[],int vertex)
{
    for(int i=0;i<vertex;i++)
    {   cout<<i<<"->";
        for(auto it=adj[i].begin();it!=adj[i].end();it++)
        {
            cout<<*it<<" ";
        }
        cout<<"\n";
    }
    return ;
}
int main()
{
    int vertex;
    cout<<"Enter the number of vertex\n";
    cin>>vertex;
    vector<int> adj[vertex];
    cout<<"Enter the number of edge\n";
    int n;
    cin>>n;
    while(n--)
    {
        int u,v;
        cout<<"Enter Starting Vertex\n";
        cin>>u;
        cout<<"Enter Ending Vertex\n";
        cin>>v;
        addedge(adj,u,v);
        
    }
    printGraph(adj,vertex);
    BFS(adj,vertex);
    return 0;
}